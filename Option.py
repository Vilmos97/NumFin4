# -*- coding: utf-8 -*-
"""Brownmozgas és Option.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NaIU2k_33YwbSTUDKWk-Y91XCbWqaaI0

##Packagek
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
import datetime
import pandas as pd

"""##Option class"""

class Option:
    def __init__(self, right:str ,strike:float ,expiry:str, pos:int):
        #call vagy put
        self.right = right
        # értéke
        self.strike= strike
        #lejárat
        self.expiry=expiry
        #long vagy short
        self.pos = pos
        self.vola = np.nan

    def initVola(self):
        self.vola = 0.2

    def calcPrice(self, S: float, timeToExp: float, vola: float, rate=0):
        if not np.isnan(vola):
            IV = vola
        else:
            IV = self.vola if not np.isnan(self.vola) else self.initVola
        if np.isnan(IV):
            print("Vola is not set!")
            return np.nan
        t = timeToExp
        if t > 0:
            d1 = (np.log(S / self.strike) + (rate + IV ** 2 / 2) * t) / (IV * np.sqrt(t))
            d2 = d1 - IV * np.sqrt(t)
            if self.right == 'C':
                return (S * norm.cdf(d1) - norm.cdf(d2) * self.strike * np.exp(-rate * t)) * self.pos
            else:
                return (norm.cdf(-d2) * self.strike * np.exp(-rate * t) - S * norm.cdf(-d1)) * self.pos
        elif t == 0:
            return self.calcPayoff(S)
        else:
            print("expired!")
            return np.nan

    def calcpayoff(self, spot: float) -> float:  #visszatérési érték jelzése
        if self.right == "C":
            return max(spot-self.strike, 0)*self.pos
        elif self.right == "P":
            return max(self.strike-spot, 0)*self.pos
        else:
            print("Wrong option type")
            return np.nan

    def calcVola(self, time, price, rate=0):    #calcs implied volaility from market price
        vola_hi = 0.4
        while self.CalcPrice(S, vola_hi, time, rate) < price:
            vola_hi *= 2
        vola_low = vola_hi / 2
        while abs(vola_hi - vola_low) > 0.0001:
            vola = 0.5 * (vola_low + vola_hi)
            price_updated = self.calcPrice(S, time, vola, rate)
            if price_updated < price:
                vola_low = vola
            else:
                vola_hi = vola
        return vola

    def calcDelta(self, S, timeToExp, vola, rate=0):
      if not np.isnan(vola):
        IV = vola
      else:
        IV = self.vola if not np.isnan(self.vola) else self.initVola
      if np.isnan(IV):
        print("Vola is not set!")
        return np.nan
      t = timeToExp
      if t > 0:
        d1 = (np.log(S / self.strike) + (rate + IV ** 2 / 2) * t) / (IV * np.sqrt(t))
        if self.right == 'C':
          return norm.cdf(d1) * self.pos
        else:
          return (norm.cdf(d1) - 1) * self.pos
      else:
        print("expired!")
        return np.nan

"""##Brown mozgás szimulálás"""

def generate(S0, mu, sigma, T, N):
    dt = T/N
    X = np.exp((mu-sigma**2/2)*dt + sigma * np.random.normal(0, np.sqrt(dt), N))
    return S0*np.cumprod(X)

sigma=0.35
N = 250
mu = 0
S0 = 100
T = 1

spots = generate(S0, mu, sigma, T, N)
times = np.arange(0, 1, 1/N)
plt.plot(times, spots)
plt.title("Brown mozgás")

"""##Brown mozgás és opció árak"""

opt = Option("C", S0, None, 1)
vola = 0.3
prices = []
deltas = []

for (t,S) in zip(times,spots):
  price = opt.calcPrice(S, 1-t, vola)
  delta = opt.calcDelta(S, 1-t, vola)
  prices.append(price)
  deltas.append(delta)

plt.plot(times,np.array(prices))
plt.title("Árak alakulása időben")

plt.plot(times,np.array(deltas))
plt.title("Delták alakulása időben")

"""### az előző, csak df-ekkel"""

df = pd.DataFrame({"time":times, "spot":spots})
df.head()

df.spot.plot()

K=100

def calcPrice(row):
  opt = Option("C", K, None, 1)
  vola = 0.3
  return opt.calcPrice(row.spot, 1-row.time, vola)

df['price'] = df.apply(calcPrice, axis=1)

df.head()

df = df.set_index('time', append=True)

df.price.plot()

"""## Házi

veszünk egy utat a lejáratig, 1 év, minden nap végén hedgelem az opciót -> deltasemleges
tn-ben deltányi stockot veszek
1 opció - delta*részvény(spot)
$ t_n  időpontban a portfólió = call - delta \cdot S_t$
"""